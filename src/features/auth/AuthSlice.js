import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { createUser } from './AuthAPI';

const initialState = {
  loggedInUser: 0,
  status: 'idle',
};


export const createUserAsync = createAsyncThunk(
  'counter/createUser',
  async (userData) => {
    const response = await createUser(userData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    increment: (state) => {

      state.value += 1;
    },
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser += action.payload;
      });
  },
});

export const selectLoggedInUser =(state)=> state.auth.loggedInUser;

export const { increment } = counterSlice.actions;




export default counterSlice.reducer;
